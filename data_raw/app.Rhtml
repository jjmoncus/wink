<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Survey Table Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Warm Neutrals (Slate, Indigo) -->
    <!-- Application Structure Plan: An interactive sandbox SPA designed as a live demo of the R package. The structure follows the package's workflow, with three sections dedicated to exploring crosstab(), banner(), and write_banners(). This design was chosen to provide a hands-on, learn-by-doing experience, allowing users to manipulate function parameters and see real-time updates to the tabular output, which is more engaging and educational than a static vignette. -->
    <!-- Visualization & Content Choices: The primary visualizations are styled HTML tables that accurately replicate the structure of the R functions' console output, including interleaved significance test rows and metadata. This choice directly reflects the package's purpose of generating tabular data. No graphical charts (Chart.js) are used, as they would not represent the package's functionality. Interactions are driven by user controls (dropdowns, toggles) that trigger JavaScript functions to recalculate and re-render these tables, simulating the R workflow in the browser. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc; /* slate-50 */
        }
        .table-container {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #e2e8f0; /* slate-200 */
            padding: 0.75rem;
            text-align: left;
        }
        th {
            background-color: #f1f5f9; /* slate-100 */
        }
        .sig-row td {
            color: #64748b; /* slate-500 */
            font-style: italic;
            font-size: 0.875rem;
        }
        .meta-row {
            background-color: #f1f5f9; /* slate-100 */
            font-weight: 600;
        }
        .code-block {
            background-color: #1e293b; /* slate-800 */
            color: #e2e8f0; /* slate-200 */
            padding: 1rem;
            border-radius: 0.5rem;
            font-family: monospace;
            white-space: pre-wrap;
            word-break: break-all;
        }
        .control-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #334155; /* slate-700 */
        }
        select, .multiselect {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #cbd5e1; /* slate-300 */
            border-radius: 0.375rem;
            background-color: white;
        }
        .multiselect {
            height: 120px;
        }
        .divider {
            border-right: 2px solid #4f46e5; /* indigo-600 */
        }
    </style>
</head>
<body class="text-slate-800">

    <div class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
        <header class="text-center mb-12">
            <h1 class="text-4xl font-bold text-slate-900">Survey Table Generator</h1>
            <p class="mt-2 text-lg text-slate-600">An Interactive Demo of the R Package</p>
        </header>

        <main class="space-y-16">
            <!-- Introduction Section -->
            <section>
                <div class="bg-white p-8 rounded-lg shadow-md">
                    <h2 class="text-2xl font-bold mb-4 text-slate-900">Welcome!</h2>
                    <p class="text-slate-700 leading-relaxed">
                        This application provides a live demonstration of an R package designed for generating publication-ready survey tables. You can interact with the controls to explore the functionality of the three main functions: `crosstab()`, `banner()`, and `write_banners()`. The tables and the corresponding R code will update automatically based on your selections. This interactive experience uses a synthetic dataset of 2,000 fictional survey responses on food attitudes.
                    </p>
                </div>
            </section>

            <!-- Crosstab Section -->
            <section id="crosstab-section" class="bg-white p-8 rounded-lg shadow-md">
                <h2 class="text-2xl font-bold mb-2 text-slate-900">1. `crosstab()` Explorer</h2>
                <p class="mb-6 text-slate-600">Generate a single, statistically-tested crosstab. Select a target variable and a breakdown variable to see the results.</p>
                <div class="grid md:grid-cols-3 gap-8">
                    <div class="md:col-span-1 space-y-6">
                        <div>
                            <label for="xtab-var" class="control-label">Target Variable (`var`)</label>
                            <select id="xtab-var">
                                <option value="pescetarian">Likelihood: Pescetarian</option>
                                <option value="veggie">Likelihood: Vegetarian</option>
                                <option value="vegan">Likelihood: Vegan</option>
                            </select>
                        </div>
                        <div>
                            <label for="xtab-by" class="control-label">Breakdown Variable (`by`)</label>
                            <select id="xtab-by">
                                <option value="rating_meat">Rating: Meat</option>
                                <option value="rating_pizza">Rating: Pizza</option>
                                <option value="rating_sushi">Rating: Sushi</option>
                                <option value="rating_veg">Rating: Vegetables</option>
                                <option value="gender">Gender</option>
                                <option value="region">Region</option>
                            </select>
                        </div>
                        <div class="flex items-center">
                            <input id="xtab-nets" type="checkbox" class="h-4 w-4 rounded border-slate-300 text-indigo-600 focus:ring-indigo-500">
                            <label for="xtab-nets" class="ml-2 block text-sm text-slate-900">Add NET Categories (`var_nets`)</label>
                        </div>
                    </div>
                    <div class="md:col-span-2">
                        <h3 class="font-semibold mb-2 text-slate-800">Generated Table</h3>
                        <div id="crosstab-output" class="table-container border rounded-lg"></div>
                        <h3 class="font-semibold mt-6 mb-2 text-slate-800">Generated R Code</h3>
                        <div id="crosstab-code" class="code-block"></div>
                    </div>
                </div>
            </section>

            <!-- Banner Section -->
            <section id="banner-section" class="bg-white p-8 rounded-lg shadow-md">
                <h2 class="text-2xl font-bold mb-2 text-slate-900">2. `banner()` Builder</h2>
                <p class="mb-6 text-slate-600">Combine multiple crosstabs into a single wide "banner" table. Select one target variable and multiple breakdown variables.</p>
                <div class="grid md:grid-cols-3 gap-8">
                    <div class="md:col-span-1 space-y-6">
                        <div>
                            <label for="banner-var" class="control-label">Target Variable (`var`)</label>
                            <select id="banner-var">
                                <option value="vegan">Likelihood: Vegan</option>
                                <option value="pescetarian">Likelihood: Pescetarian</option>
                                <option value="veggie">Likelihood: Vegetarian</option>
                            </select>
                        </div>
                        <div>
                            <label for="banner-bys" class="control-label">Banner Variables (`bys`)</label>
                            <select id="banner-bys" multiple class="multiselect">
                                <option value="rating_meat" selected>Rating: Meat</option>
                                <option value="rating_pizza" selected>Rating: Pizza</option>
                                <option value="rating_sushi" selected>Rating: Sushi</option>
                                <option value="rating_veg">Rating: Vegetables</option>
                                <option value="gender">Gender</option>
                                <option value="region">Region</option>
                            </select>
                        </div>
                         <div class="flex items-center">
                            <input id="banner-nets" type="checkbox" checked class="h-4 w-4 rounded border-slate-300 text-indigo-600 focus:ring-indigo-500">
                            <label for="banner-nets" class="ml-2 block text-sm text-slate-900">Add NET Categories (`var_nets`)</label>
                        </div>
                    </div>
                    <div class="md:col-span-2">
                        <h3 class="font-semibold mb-2 text-slate-800">Generated Banner Table</h3>
                        <div id="banner-output" class="table-container border rounded-lg"></div>
                        <h3 class="font-semibold mt-6 mb-2 text-slate-800">Generated R Code</h3>
                        <div id="banner-code" class="code-block"></div>
                    </div>
                </div>
            </section>

            <!-- Export Section -->
            <section id="export-section" class="bg-white p-8 rounded-lg shadow-md">
                <h2 class="text-2xl font-bold mb-2 text-slate-900">3. `write_banners()` Exporter</h2>
                <p class="mb-6 text-slate-600">Export a list of banner tables to a formatted Excel workbook. Click the button to simulate the export process.</p>
                 <div class="grid md:grid-cols-3 gap-8">
                     <div class="md:col-span-1">
                        <button id="export-button" class="w-full bg-indigo-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-indigo-700 transition-colors">
                            Simulate Excel Export
                        </button>
                    </div>
                    <div class="md:col-span-2">
                        <div id="export-output" class="hidden">
                            <h3 class="font-semibold mb-2 text-slate-800">Simulated Excel Output</h3>
                             <div class="p-4 border rounded-lg bg-slate-50">
                                <p class="text-green-700 font-medium mb-4">✓ Workbook successfully created!</p>
                                <p class="text-sm text-slate-600 mb-2">The generated Excel file would include:</p>
                                <ul class="list-disc list-inside text-sm space-y-1 text-slate-700">
                                    <li>A "Table of Contents" sheet with hyperlinks.</li>
                                    <li id="export-sheet-list">Formatted worksheets for each analysis with borders and merged headers.</li>
                                </ul>
                            </div>
                        </div>
                        <h3 class="font-semibold mt-6 mb-2 text-slate-800">Generated R Code</h3>
                        <div id="export-code" class="code-block"></div>
                    </div>
                </div>
            </section>
        </main>
    </div>

    <script>
        const foodData = [
            // This will be populated with a sample of the data for performance
        ];

        // Data generation logic
        function generateData() {
            const n_respondents = 2000;
            const rating_scale = ["Very much dislike", "Somewhat dislike", "About equally like and dislike", "Somewhat like", "Very much like"];
            const likelihood_scale = ["Very Low", "Low", "Moderate", "High", "Very High"];
            const genders = ["Female", "Male", "Non-binary", "Prefer not to say"];
            const regions = ["West Coast", "East Coast", "Midwest", "South", "Mountain West", "Southwest"];

            for (let i = 1; i <= n_respondents; i++) {
                foodData.push({
                    unique_id: i,
                    age: Math.floor(Math.random() * (80 - 18 + 1)) + 18,
                    gender: genders[Math.floor(Math.random() * genders.length)],
                    region: regions[Math.floor(Math.random() * regions.length)],
                    rating_meat: rating_scale[Math.floor(Math.random() * rating_scale.length)],
                    rating_pizza: rating_scale[Math.floor(Math.random() * rating_scale.length)],
                    rating_sushi: rating_scale[Math.floor(Math.random() * rating_scale.length)],
                    rating_veg: rating_scale[Math.floor(Math.random() * rating_scale.length)],
                    pescetarian: likelihood_scale[Math.floor(Math.random() * likelihood_scale.length)],
                    veggie: likelihood_scale[Math.floor(Math.random() * likelihood_scale.length)],
                    vegan: likelihood_scale[Math.floor(Math.random() * likelihood_scale.length)],
                });
            }
        }
        generateData();

        const LIKELIHOOD_LEVELS = ["Very Low", "Low", "Moderate", "High", "Very High"];

        function getUniqueValues(data, key) {
            const values = [...new Set(data.map(item => item[key]))];
            // Sort factor-like levels correctly
            if (key.startsWith('rating_')) return ["Very much dislike", "Somewhat dislike", "About equally like and dislike", "Somewhat like", "Very much like"];
            if (['pescetarian', 'veggie', 'vegan'].includes(key)) return LIKELIHOOD_LEVELS;
            return values.sort();
        }

        // Mock crosstab calculation
        function calculateCrosstab(data, varName, byName, useNets) {
            const byLevels = getUniqueValues(data, byName);
            let varLevels = getUniqueValues(data, varName);

            const results = {};
            byLevels.forEach(byLevel => {
                const groupData = data.filter(d => d[byName] === byLevel);
                const counts = {};
                varLevels.forEach(vl => counts[vl] = 0);

                groupData.forEach(row => {
                    counts[row[varName]]++;
                });

                results[byLevel] = { percentages: {}, n: groupData.length };
                varLevels.forEach(vl => {
                    results[byLevel].percentages[vl] = groupData.length > 0 ? (counts[vl] / groupData.length * 100) : 0;
                });
            });

            // Add mock NETs
            if (useNets && ['pescetarian', 'veggie', 'vegan'].includes(varName)) {
                byLevels.forEach(byLevel => {
                    const high = results[byLevel].percentages['Very High'] + results[byLevel].percentages['High'];
                    const low = results[byLevel].percentages['Very Low'] + results[byLevel].percentages['Low'];
                    results[byLevel].percentages['NET: High Likelihood'] = high;
                    results[byLevel].percentages['NET: Low Likelihood'] = low;
                });
                varLevels.splice(2, 0, "NET: Low Likelihood");
                varLevels.splice(varLevels.length, 0, "NET: High Likelihood");
            }

            return { results, varLevels, byLevels };
        }

        function renderCrosstab() {
            const varName = document.getElementById('xtab-var').value;
            const byName = document.getElementById('xtab-by').value;
            const useNets = document.getElementById('xtab-nets').checked;

            const { results, varLevels, byLevels } = calculateCrosstab(foodData, varName, byName, useNets);

            let tableHtml = '<table><thead><tr><th>' + varName + '</th>';
            byLevels.forEach(bl => tableHtml += `<th>${bl}</th>`);
            tableHtml += '</tr></thead><tbody>';

            varLevels.forEach(vl => {
                tableHtml += `<tr><td>${vl}</td>`;
                byLevels.forEach(bl => {
                    tableHtml += `<td>${results[bl].percentages[vl] !== undefined ? Math.round(results[bl].percentages[vl]) : '-'}%</td>`;
                });
                tableHtml += '</tr>';
                // Add sig row
                tableHtml += `<tr class="sig-row"><td>..</td>`;
                 byLevels.forEach(bl => {
                    const sigLetter = results[bl].percentages[vl] > 30 ? ' A' : (results[bl].percentages[vl] < 15 ? ' B' : '');
                    tableHtml += `<td>${sigLetter}</td>`;
                });
                tableHtml += '</tr>';
            });

            // Meta rows
            tableHtml += '<tr class="meta-row"><td>N</td>';
            byLevels.forEach(bl => tableHtml += `<td>${results[bl].n}</td>`);
            tableHtml += '</tr>';
            tableHtml += '<tr class="meta-row"><td>DEFF</td>';
            byLevels.forEach(bl => tableHtml += `<td>${(1.2 + Math.random()*0.5).toFixed(1)}</td>`);
            tableHtml += '</tr>';
             tableHtml += '<tr class="meta-row"><td>MOSE</td>';
            byLevels.forEach(bl => tableHtml += `<td>+/- ${(2.5 + Math.random()*1).toFixed(1)}%</td>`);
            tableHtml += '</tr>';

            tableHtml += '</tbody></table>';
            document.getElementById('crosstab-output').innerHTML = tableHtml;

            // Update code
            let code = `xtab <- crosstab(\n  data = food,\n  var = "${varName}",\n  by = "${byName}"`;
            if (useNets) {
                code += `,\n  var_nets = list(\n    "NET: High Likelihood" = c("Very High", "High"),\n    "NET: Low Likelihood" = c("Very Low", "Low")\n  )`;
            }
            code += "\n)\nxtab";
            document.getElementById('crosstab-code').textContent = code;
        }

        function renderBanner() {
            const varName = document.getElementById('banner-var').value;
            const bysOptions = document.getElementById('banner-bys').options;
            const bys = Array.from(bysOptions).filter(option => option.selected).map(option => option.value);
            const useNets = document.getElementById('banner-nets').checked;

            if (bys.length === 0) {
                 document.getElementById('banner-output').innerHTML = `<div class="p-4 text-center text-slate-500">Please select at least one banner variable.</div>`;
                 document.getElementById('banner-code').textContent = "# Please select banner variables to generate code.";
                 return;
            }

            // Mock total column
            const totalData = calculateCrosstab(foodData, varName, 'unique_id', useNets);
             let allVarLevels = getUniqueValues(foodData, varName);
             if (useNets) {
                allVarLevels.splice(2, 0, "NET: Low Likelihood");
                allVarLevels.push("NET: High Likelihood");
            }

            let tableHtml = '<table><thead><tr><th>' + varName + '</th><th class="divider">Total</th>';
            let colDividers = [2];
            let currentDivider = 2;

            bys.forEach(byName => {
                const { byLevels } = calculateCrosstab(foodData, varName, byName, false);
                byLevels.forEach(bl => tableHtml += `<th>${bl}</th>`);
                currentDivider += byLevels.length;
                colDividers.push(currentDivider);
            });
            tableHtml += '</tr></thead><tbody>';

            allVarLevels.forEach(vl => {
                tableHtml += `<tr><td>${vl}</td>`;
                // Total col
                 const totalVal = totalData.results.hasOwnProperty('1') ? (totalData.results['1'].percentages[vl] || 0) : 0;
                tableHtml += `<td class="divider">${Math.round(totalVal)}%</td>`;

                // Banner cols
                bys.forEach((byName, index) => {
                    const { results, byLevels } = calculateCrosstab(foodData, varName, byName, useNets);
                    byLevels.forEach((bl, bl_index) => {
                        const isLastInGroup = bl_index === byLevels.length - 1;
                        const dividerClass = colDividers.includes(2 + index * byLevels.length + bl_index + 1) ? 'divider' : '';
                        tableHtml += `<td class="${dividerClass}">${results[bl].percentages[vl] !== undefined ? Math.round(results[bl].percentages[vl]) : '-'}%</td>`;
                    });
                });
                tableHtml += '</tr>';
                // Sig row
                tableHtml += `<tr class="sig-row"><td>..</td><td class="divider"></td>`;
                bys.forEach((byName, index) => {
                     const { byLevels } = calculateCrosstab(foodData, varName, byName, false);
                    byLevels.forEach((bl, bl_index) => {
                         const dividerClass = colDividers.includes(2 + index * byLevels.length + bl_index + 1) ? 'divider' : '';
                        tableHtml += `<td class="${dividerClass}"></td>`;
                    });
                });
                tableHtml += '</tr>';
            });

            // Meta rows
             const metaRows = ['N', 'DEFF', 'MOSE'];
             metaRows.forEach(meta => {
                tableHtml += `<tr class="meta-row"><td>${meta}</td><td class="divider">${{N:2000,DEFF:1.0,MOSE:'+/- 2.2%'}[meta]}</td>`;
                 bys.forEach((byName, index) => {
                     const { results, byLevels } = calculateCrosstab(foodData, varName, byName, false);
                    byLevels.forEach((bl, bl_index) => {
                        const dividerClass = colDividers.includes(2 + index * byLevels.length + bl_index + 1) ? 'divider' : '';
                        const metaVal = meta === 'N' ? results[bl].n : (meta === 'DEFF' ? (1.2 + Math.random()*0.5).toFixed(1) : `+/- ${(2.5 + Math.random()*1).toFixed(1)}%`);
                        tableHtml += `<td class="${dividerClass}">${metaVal}</td>`;
                    });
                 });
                tableHtml += '</tr>';
             });

            tableHtml += '</tbody></table>';
            document.getElementById('banner-output').innerHTML = tableHtml;

            // Update code
            let code = `banner_results <- banner(\n  data = food,\n  var = "${varName}",\n  bys = c("${bys.join('", "')}")`;
            if (useNets) {
                code += `,\n  var_nets = list(\n    "NET: High Likelihood" = c("Very High", "High"),\n    "NET: Low Likelihood" = c("Very Low", "Low")\n  )`;
            }
            code += "\n)\nbanner_results";
            document.getElementById('banner-code').textContent = code;
        }

        function renderExport() {
            const exportOutput = document.getElementById('export-output');
            exportOutput.classList.remove('hidden');

            const bannerVar1 = 'Vegan_Likelihood';
            const bannerVar2 = 'Pescetarian_Likelihood';

            document.getElementById('export-sheet-list').innerHTML = `Formatted worksheets for "${bannerVar1}" and "${bannerVar2}" with borders and merged headers.`;

            const code = `results_list <- list(\n  ${bannerVar1} = banner_results,\n  ${bannerVar2} = pescetarian_results\n)\n\nwrite_banners(\n  banners_list = results_list,\n  file = "my_survey_report.xlsx",\n  overwrite = TRUE\n)`;
            document.getElementById('export-code').textContent = code;
        }

        function addEventListeners() {
            document.getElementById('xtab-var').addEventListener('change', renderCrosstab);
            document.getElementById('xtab-by').addEventListener('change', renderCrosstab);
            document.getElementById('xtab-nets').addEventListener('change', renderCrosstab);

            document.getElementById('banner-var').addEventListener('change', renderBanner);
            document.getElementById('banner-bys').addEventListener('change', renderBanner);
            document.getElementById('banner-nets').addEventListener('change', renderBanner);

            document.getElementById('export-button').addEventListener('click', renderExport);
        }

        document.addEventListener('DOMContentLoaded', () => {
            addEventListeners();
            renderCrosstab();
            renderBanner();
            renderExport(); // Render once to populate code block
            document.getElementById('export-output').classList.add('hidden'); // Then hide the output
        });
    </script>
</body>
</html>
